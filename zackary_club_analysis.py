# -*- coding: utf-8 -*-
"""Zackary Club  Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15NcFMu4zKelcy9iUC5K4nuWTJHGygjKO
"""

import numpy as np
import random
import networkx as nx
from IPython.display import Image
import matplotlib.pyplot as plt

pip install networkx

n=34
m = 78
G_karate = nx.karate_club_graph()

pos = nx.spring_layout(G_karate)
nx.draw(G_karate, cmap = plt.get_cmap('CMRmap_r'), with_labels=True, pos=pos)

n = G_karate.number_of_nodes()
m = G_karate.number_of_edges()
print("Number of nodes : %d" % n)
print("Number of edges : %d" % m)
print("Number of connected components : %d" % nx.number_connected_components(G_karate))

plt.figure(figsize=(12,8))
nx.draw(G_karate)
plt.gca().collections[0].set_edgecolor("#aabbcc")

# Remove 20% of the edges
proportion_edges = 0.2
edge_subset = random.sample(G_karate.edges(), int(proportion_edges * G_karate.number_of_edges()))

# Create a copy of the graph and remove the edges
G_karate_train = G_karate.copy()
G_karate_train.remove_edges_from(edge_subset)

plt.figure(figsize=(12,8))
nx.draw(G_karate_train)
plt.gca().collections[0].set_edgecolor("#aabbcc") # set node border color to black

edge_subset_size = len(list(edge_subset))
print("Number of edges deleted : %d" % edge_subset_size)
print("Number of edges remaining : %d" % (m - edge_subset_size))

from sklearn.metrics import classification_report, roc_auc_score
from sklearn.metrics import classification_report, roc_curve, roc_auc_score

# Make prediction using Jaccard Coefficient
pred_jaccard = list(nx.jaccard_coefficient(G_karate_train))
score_jaccard, label_jaccard = zip(*[(s, (u,v) in edge_subset) for (u,v,s) in pred_jaccard])

#Compute the ROC AUC Score
fpr_jaccard, tpr_jaccard, _ = roc_curve(label_jaccard, score_jaccard)
auc_jaccard = roc_auc_score(label_jaccard, score_jaccard)

# Prediction using Preferential Attachment
pred_pref = list(nx.preferential_attachment(G_karate_train))
score_pref, label_pref = zip(*[(s, (u,v) in edge_subset) for (u,v,s) in pred_pref])

# Compute the ROC AUC Score
fpr_pref, tpr_pref, _ = roc_curve(label_pref, score_pref)
auc_pref = roc_auc_score(label_pref, score_pref)

# Prediction using Adamic Adar
pred_adamic = list(nx.adamic_adar_index(G_karate_train))
score_adamic, label_adamic = zip(*[(s, (u,v) in edge_subset) for (u,v,s) in pred_adamic])

# Compute the ROC AUC Score
fpr_adamic, tpr_adamic, _ = roc_curve(label_adamic, score_adamic)
auc_adamic = roc_auc_score(label_adamic, score_adamic)

accuracy =auc_jaccard
accuracy=auc_adamic
accuracy=auc_pref

print("Jaccard Model Accuracy:", auc_jaccard)
print("Adamic Adar Model Accuracy:",auc_adamic)
print("Preferential Attachment Model Accuracy",auc_pref)

from networkx.algorithms.link_prediction import preferential_attachment
print("Jaccard Model Accuracy:", auc_jaccard )
print("Adamic Adar Model Accuracy:", auc_adamic)
print("Preferential Attachment Model Accuracy",auc_pref)

plt.figure(figsize=(8,5))

plt.title('Similarity (Test set)', fontdict={'fontweight':'bold','fontsize':22})

import numpy as np
import matplotlib.pyplot as plt

x =np.arange(0, 5, 0.8)
y= np.sin(x)
plt.plot(x,y)

x= plt.xlabel('Karate Club',fontdict={'fontweight':'bold','fontsize':15})
y= plt.ylabel('Accuracy',fontdict={'fontweight':'bold','fontsize':15})


plt.legend()

plt.savefig('Similarity_Test_ set_figure.png',dpi=300)


plt.show()

pos = nx.spring_layout(G_karate)
betCent = nx.betweenness_centrality(G_karate, normalized=True, endpoints=True)
node_color = [20000.0 * G_karate.degree(v) for v in G_karate]
node_size =  [v * 10000 for v in betCent.values()]
plt.figure(figsize=(10,10))
nx.draw_networkx(G_karate, pos=pos, with_labels=False,
                 node_color=node_color,
                 node_size=node_size )
plt.axis('off')